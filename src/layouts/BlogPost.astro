---
import "../styles/global.css";
import type { CollectionEntry } from "astro:content";
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import FormattedDate from "../components/FormattedDate.astro";
import { Image } from "astro:assets";
import { Calendar } from "lucide-react";
type Props = CollectionEntry<"blog">["data"];

const { title, description, pubDate, updatedDate, heroImage, tags } =
  Astro.props;
---

<html lang="zh-cn">
  <head>
    <BaseHead title={title} description={description} />
  </head>

  <body>
    <Header />
    <main>
      <article class="max-w-4xl mx-auto px-4">
        {
          heroImage && (
            <div class="mb-8">
              <Image
                src={heroImage}
                alt={title}
                width={1020}
                height={510}
                class="w-full h-auto rounded-lg shadow-lg"
              />
            </div>
          )
        }
        <div class="prose prose-lg max-w-none">
          <header class="mb-8">
            <h1 class="text-4xl font-bold mb-4 text-gray-800">{title}</h1>
            <div class="flex flex-wrap items-center gap-4 text-gray-600">
              <div class="flex items-center">
                <Calendar className="mr-1" size={16} />
                <FormattedDate date={pubDate} />
              </div>
              {
                updatedDate && (
                  <div class="flex items-center">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="h-5 w-5 mr-2"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                      />
                    </svg>
                    <FormattedDate date={updatedDate} />
                  </div>
                )
              }
            </div>
            {
              tags && tags.length > 0 && (
                <div class="flex flex-wrap gap-2 mt-4">
                  {tags.map((tag) => (
                    <a
                      href={`/tags/${encodeURIComponent(tag)}/`}
                      class="px-3 py-1 text-sm bg-gray-100 text-gray-600 rounded-full hover:bg-blue-100 transition-colors duration-200"
                    >
                      {tag}
                    </a>
                  ))}
                </div>
              )
            }
          </header>
          <div
            class="prose-headings:font-bold prose-headings:text-gray-800 prose-p:text-gray-600 prose-a:text-blue-600 prose-a:no-underline hover:prose-a:underline prose-table:w-full prose-table:border prose-table:border-gray-200 prose-th:bg-gray-100 prose-th:p-2 prose-th:border prose-th:border-gray-200 prose-td:p-2 prose-td:border prose-td:border-gray-200 prose-tr:even:bg-gray-50 prose-tr:hover:bg-blue-50"
          >
            <slot />
          </div>
        </div>
      </article>
    </main>
    <Footer />
    
    <script is:inline>
      // 现代化代码块复制功能
      document.addEventListener('DOMContentLoaded', function() {
        // 为代码块添加进入动画延迟
        const codeBlocks = document.querySelectorAll('.code-block-container');
        codeBlocks.forEach(function(block, index) {
          block.style.animationDelay = (index * 0.1) + 's';
        });

        // 为所有复制按钮添加事件监听器
        const copyButtons = document.querySelectorAll('.copy-button');
        
        copyButtons.forEach(function(button) {
          button.addEventListener('click', async function(event) {
            const target = event.currentTarget;
            const codeText = target.getAttribute('data-code');
            
            if (!codeText) {
              console.error('No code text found');
              return;
            }

            // 添加加载状态
            target.classList.add('loading');
            target.title = '复制中...';

            try {
              await navigator.clipboard.writeText(codeText);
              
              // 移除加载状态，添加成功状态
              target.classList.remove('loading');
              target.classList.add('copied');
              target.title = '已复制!';
              
              // 触发成功动画
              const container = target.closest('.code-block-container');
              if (container) {
                container.style.transform = 'translateY(-2px) scale(1.005)';
                setTimeout(function() {
                  container.style.transform = '';
                }, 300);
              }
              
              // 2.5秒后恢复原状
              setTimeout(function() {
                target.classList.remove('copied');
                target.title = '复制代码';
              }, 2500);
              
            } catch (err) {
              console.error('Failed to copy text: ', err);
              
              // 移除加载状态，显示错误状态
              target.classList.remove('loading');
              target.style.background = 'linear-gradient(145deg, rgba(239, 68, 68, 0.8), rgba(220, 38, 38, 0.8))';
              target.style.borderColor = 'rgba(239, 68, 68, 0.6)';
              target.title = '复制失败，请重试';
              
              // 3秒后恢复原状
              setTimeout(function() {
                target.style.background = '';
                target.style.borderColor = '';
                target.title = '复制代码';
              }, 3000);
            }
          });

          // 添加键盘支持
          button.addEventListener('keydown', function(event) {
            if (event.key === 'Enter' || event.key === ' ') {
              event.preventDefault();
              button.click();
            }
          });
        });

        // 代码行悬停效果
        const codeLines = document.querySelectorAll('.code-block-container pre .line');
        codeLines.forEach(function(line) {
          line.addEventListener('mouseenter', function() {
            this.style.transform = 'translateX(4px)';
            this.style.background = 'rgba(59, 130, 246, 0.08)';
          });
          
          line.addEventListener('mouseleave', function() {
            this.style.transform = '';
            this.style.background = '';
          });
        });

        // 添加复制快捷键支持 (Ctrl+C 或 Cmd+C)
        document.addEventListener('keydown', function(event) {
          if ((event.ctrlKey || event.metaKey) && event.key === 'c') {
            const focusedElement = document.activeElement;
            if (focusedElement && focusedElement.classList.contains('copy-button')) {
              event.preventDefault();
              focusedElement.click();
            }
          }
        });

        // 观察器：为动态添加的代码块添加功能
        const observer = new MutationObserver(function(mutations) {
          mutations.forEach(function(mutation) {
            mutation.addedNodes.forEach(function(node) {
              if (node.nodeType === Node.ELEMENT_NODE) {
                const newCodeBlocks = node.querySelectorAll ? node.querySelectorAll('.code-block-container') : [];
                newCodeBlocks.forEach(function(block, index) {
                  block.style.animationDelay = (index * 0.1) + 's';
                });
                
                const newCopyButtons = node.querySelectorAll ? node.querySelectorAll('.copy-button') : [];
                newCopyButtons.forEach(function(button) {
                  if (!button.hasAttribute('data-initialized')) {
                    button.setAttribute('data-initialized', 'true');
                    // 重新绑定事件监听器...
                  }
                });
              }
            });
          });
        });

        observer.observe(document.body, {
          childList: true,
          subtree: true
        });

        // 性能优化：防抖处理窗口大小变化
        let resizeTimeout;
        window.addEventListener('resize', function() {
          clearTimeout(resizeTimeout);
          resizeTimeout = setTimeout(function() {
            // 重新计算代码块布局
            codeBlocks.forEach(function(block) {
              const pre = block.querySelector('pre');
              if (pre && pre.scrollWidth > pre.clientWidth) {
                block.classList.add('has-horizontal-scroll');
              } else {
                block.classList.remove('has-horizontal-scroll');
              }
            });
          }, 250);
        });

        // 初始化时检查滚动条
        codeBlocks.forEach(function(block) {
          const pre = block.querySelector('pre');
          if (pre && pre.scrollWidth > pre.clientWidth) {
            block.classList.add('has-horizontal-scroll');
          }
        });
      });
    </script>
  </body>
</html>
